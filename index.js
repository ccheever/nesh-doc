// Generated by CoffeeScript 1.9.0
(function() {
  var chalk, intdoc, isFunction, lastTokenPlus, vm, __doc__,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  __doc__ = "Shows documentation for an expression; you can also type Ctrl-Q in-line";

  chalk = require('chalk');

  intdoc = require('intdoc');

  isFunction = require('lodash-node').isFunction;

  vm = require('vm');

  lastTokenPlus = function(input) {
    "A crude cut at figuring out where the last thing you want to\nevaluate in what you're typing is\n\nEx. If you are typing\n  myVal = new somemodule.SomeClass\n\nYou probably just want help on `somemodule.SomeClass`\n";
    var c, t, _i;
    t = "";
    for (_i = input.length - 1; _i >= 0; _i += -1) {
      c = input[_i];
      if (__indexOf.call("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.[]'\"$_:", c) < 0) {
        break;
      }
      t = c + t;
    }
    if (t[0] === ".") {
      t = t.slice(1);
    }
    if (t.slice(-1) === ".") {
      t = t.slice(0, -1);
    }
    return t;
  };

  exports.__doc__ = __doc__;

  exports.postStart = function(context) {
    var document, originalEval, repl;
    repl = context.repl;
    document = function(expr, reportErrors, showCode) {
      var callbackParam, defibbed, doc, e, result, tyname, x, _ref;
      if (expr.trim().length === 0) {
        if (reportErrors) {
          repl.outputStream.write(chalk.cyan(__doc__ + "\n"));
        }
      } else {
        try {
          if (repl.useGlobal) {
            result = vm.runInThisContext("(" + expr + ")");
          } else {
            result = vm.runInContext("(" + expr + ")", repl.context);
          }
        } catch (_error) {
          e = _error;
          if (reportErrors) {
            repl.outputStream.write(chalk.red("Bad input; can't document\n"));
          }
          repl.displayPrompt();
          return null;
        }
        if ((result.that != null) && isFunction(result)) {
          result = result.that;
          defibbed = true;
        } else {
          defibbed = false;
        }
        doc = intdoc(result);
        if (defibbed) {
          callbackParam = doc.params.pop();
        }
        if (doc.name && doc.name.length > 0) {
          tyname = "[" + doc.type + ": " + doc.name + "]";
        } else {
          tyname = "[" + doc.type + "]";
        }
        repl.outputStream.write(chalk.cyan(tyname));
        if (typeof result === 'function' && (doc.params != null)) {
          repl.outputStream.write(chalk.yellow(" " + ((_ref = doc.name) != null ? _ref : chalk.gray('<Lambda>')) + "(" + (((function() {
            var _i, _len, _ref1, _results;
            _ref1 = doc.params;
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              x = _ref1[_i];
              _results.push("" + x);
            }
            return _results;
          })()).join(", ")) + ")"));
          if (defibbed) {
            repl.outputStream.write(chalk.yellow(" *" + callbackParam + " handled by fibrous"));
          }
        }
        repl.outputStream.write("\n");
        if ((doc.doc != null) && doc.doc.length > 0) {
          repl.outputStream.write(doc.doc + "\n");
        }
      }
      if (showCode) {
        if (doc) {
          if (doc.code != null) {
            repl.outputStream.write(chalk.green(doc.code + "\n"));
          } else {
            repl.outputStream.write(chalk.green(result.toString() + "\n"));
          }
        }
      }
      repl.displayPrompt();
      return doc;
    };
    repl.defineCommand('doc', {
      help: __doc__,
      action: function(expr) {
        return document(expr, true);
      }
    });
    repl.inputStream.on('keypress', function(char, key) {
      var leave, rli;
      if (!(key && key.ctrl && !key.meta && !key.shift && key.name === 'q')) {
        leave = true;
      }
      if (leave) {
        repl.__neshDoc__lastDoc = null;
        return;
      }
      rli = repl.rli;
      repl.__neshDoc__docRequested = true;
      return rli.write("\n");
    });
    originalEval = repl["eval"];
    return repl["eval"] = function(input, context, filename, callback) {
      var doc, showCode, toDoc;
      if (repl.__neshDoc__docRequested) {
        repl.__neshDoc__docRequested = false;
        input = input.slice(1, -2);
        toDoc = lastTokenPlus(input);
        if (toDoc !== input) {
          repl.outputStream.write(chalk.yellow(toDoc + "\n"));
        }
        if (repl.__neshDoc__lastDoc === toDoc) {
          showCode = true;
        } else {
          showCode = false;
        }
        doc = document(toDoc, false, showCode);
        repl.__neshDoc__lastDoc = toDoc;
        return repl.rli.write(input);
      } else {
        repl.__neshDoc__lastDoc = null;
        return originalEval(input, context, filename, callback);
      }
    };
  };

}).call(this);
